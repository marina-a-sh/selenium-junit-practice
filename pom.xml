<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.groundwork</groupId>
  <artifactId>selenium-junit-practice</artifactId>
  <version>1.0</version>

  <name>selenium-junit-practice</name>
  <url>http://www.groundwork.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>11</maven.compiler.source>
    <maven.compiler.target>11</maven.compiler.target>
    <builtby.variable>Marina A. Shaposhnik</builtby.variable>
    <aspectj.version>1.9.9.1</aspectj.version>
  </properties>

  <dependencies>
<!--Dependencies are artifacts (i.e. a jar) that your project requires to be available in its classpath
    at some point in time (i.e. at compile time (you are compiling against their API) or runtime)-->
    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-java</artifactId>
      <version>4.6.0</version>
    </dependency>
    <dependency>
      <groupId>io.github.bonigarcia</groupId>
      <artifactId>webdrivermanager</artifactId>
      <version>5.3.1</version>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
      <artifactId>jackson-dataformat-yaml</artifactId>
      <version>2.14.0</version>
    </dependency>
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <version>3.23.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-slf4j-impl</artifactId>
      <version>2.19.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.qameta.allure</groupId>
      <artifactId>allure-junit4</artifactId>
      <version>2.20.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <version>5.3.0</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <profiles>
    <profile>
      <id>purge</id>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-clean-plugin</artifactId>
            <configuration>
              <excludeDefaultDirectories>true</excludeDefaultDirectories>
              <filesets>
                <fileset>
                  <directory>target/</directory>
                  <followSymlinks>false</followSymlinks>
                  <includes>
                    <include>**/*</include>
                  </includes>
                </fileset>
              </filesets>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <reporting> <!--Reporting plugins are executed during the site generation or run as standalone goal via CLI-->
    <!--The Surefire Report Plugin parses the generated TEST-*.xml files under ${basedir}/target/surefire-reports
        and renders them using DOXIA, which creates the web interface version of the test results.-->
    <!--The Surefire Report Plugin has three goals:
    surefire-report:report Generates the test results report into HTML format. (target/site folder)
    surefire-report:report-only This goal does not run the tests, it only builds the reports.
    surefire-report:failsafe-report-only This goal does not run the tests, it only builds the IT reports.-->
    <plugins>
      <plugin> <!--site phase-->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-report-plugin</artifactId>
        <version>2.22.2</version>
        <configuration>
          <outputName>groundwork-practice-test-report</outputName>
        </configuration>
      </plugin>
      <plugin>
        <!--The Surefire Report Plugin has the capability to cross reference the source code that made the test fail.
            After 'mvn site' see Failure Details section -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jxr-plugin</artifactId>
        <version>3.1.1</version>
      </plugin>
    </plugins>
  </reporting>


  <build>
    <resources>
      <resource>
        <directory>src/test/resources</directory>
        <includes>
          <include>**/*.yml</include>
          <include>**/*.xml</include>
          <include>**/*.html</include>
        </includes>
        <filtering>true</filtering>
      </resource>
    </resources>

    <plugins>
<!--  A plugin is an artifact that you can configure in your project to have it actually do something
      during the build of your project (i.e to start and stop server for tests running). Plugin may need
      its own dependencies. -->
      <plugin> <!--before and after test phase: process-test-classes and prepare-package-->
        <groupId>org.eclipse.jetty</groupId>
        <artifactId>jetty-maven-plugin</artifactId>
        <version>11.0.12</version>
        <!--https://www.eclipse.org/jetty/documentation/jetty-11/programming-guide/index.html-->
        <configuration>
          <supportedPackagings>jar</supportedPackagings>
          <webAppSourceDirectory>${basedir}/src/test/resources/html</webAppSourceDirectory>
          <stopKey>foo</stopKey>
          <stopPort>9999</stopPort>
          <stopWait>2</stopWait>
          <webApp>
            <contextPath>/</contextPath>
          </webApp>
          <httpConnector>
            <port>8889</port>
          </httpConnector>
        </configuration>
        <executions>
          <execution>
            <id>start-jetty</id>
            <phase>process-test-classes</phase>
            <goals>
              <goal>start</goal>
            </goals>
          </execution>
          <execution>
            <id>stop-jetty</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>stop</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin> <!--test phase-->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.22.2</version>
        <configuration>
          <testFailureIgnore>false</testFailureIgnore>
          <argLine>
            -javaagent:"${settings.localRepository}/org/aspectj/aspectjweaver/${aspectj.version}/aspectjweaver-${aspectj.version}.jar"
          </argLine>
          <properties>
            <property>
              <name>listener</name>
              <value>io.qameta.allure.junit4.AllureJunit4</value>
            </property>
          </properties>
          <systemProperties>
            <property>
              <name>allure.results.directory</name>
              <value>target/allure-results</value>
              <value>allure-results</value>
            </property>
          </systemProperties>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>${aspectj.version}</version>
          </dependency>
        </dependencies>
      </plugin>
      <plugin> <!--test phase-->
        <groupId>io.qameta.allure</groupId>
        <artifactId>allure-maven</artifactId>
        <version>2.10.0</version>
        <configuration>
          <reportVersion>2.14.0</reportVersion>
        </configuration>
      </plugin>
      <plugin> <!--package phase-->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.0.2</version>
        <executions>
          <execution>
            <goals>
              <goal>test-jar</goal>
            </goals>
            <configuration>
              <archive>
                <manifest>
                  <mainClass>org.groundwork.SuiteRunner</mainClass>
                </manifest>
                <manifestEntries>
                  <Built-By>${builtby.variable}</Built-By>
                </manifestEntries>
              </archive>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin> <!--package phase-->
        <!--mvn clean package -DskipTests to create selenium-junit-groundwork-1.0-fat-tests.jar in target folder
            https://www.javaguides.net/2018/06/apache-maven-assembly-plugin.html-->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>3.4.2</version>
        <configuration>
          <archive>
            <manifest>
              <mainClass>org.groundwork.SuiteRunner</mainClass>
            </manifest>
            <manifestEntries>
              <Built-By>${builtby.variable}</Built-By>
            </manifestEntries>
          </archive>
          <descriptors>
            <descriptor>src/main/assembly/assembly.xml</descriptor>
          </descriptors>
          <!--          <descriptorRefs>-->
          <!--            <descriptorRef>jar-with-dependencies</descriptorRef>-->
          <!--          </descriptorRefs>-->
        </configuration>
        <executions>
          <execution>
            <id>make-assembly</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin> <!--site phase, need reports of test runs even if there are test failures-->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>3.3.0</version>
        <executions>
          <execution>
            <id>unpack</id>
            <phase>site</phase>
            <goals>
              <goal>unpack</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>ant</groupId>
                  <artifactId>ant-optional</artifactId>
                  <version>1.5.3-1</version>
                  <outputDirectory>${basedir}/target</outputDirectory>
                  <includes>org/apache/tools/ant/taskdefs/optional/junit/xsl/junit-frames.xsl</includes>
                  <fileMappers>
                    <org.codehaus.plexus.components.io.filemappers.RegExpFileMapper>
                      <pattern>.*</pattern>
                      <replacement>junit-frames-base.xsl</replacement>
                    </org.codehaus.plexus.components.io.filemappers.RegExpFileMapper>
                  </fileMappers>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin> <!--site phase-->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>3.1.0</version>
        <!--It is not the intention of this plugin to provide a means of polluting the POM, so it's encouraged
        to move all your Ant tasks to a build.xml file and just call it from the POM using Ant's <ant/> task.
        One of the main purposes of this plugin is to facilitate the migration from Ant based projects to Maven.-->
        <executions>
          <execution>
            <!--https://stackoverflow.com/questions/1727616/custom-junit-report-->
            <id>junitreport</id>
            <phase>site</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <mkdir dir="${basedir}/target/junitreport" />
                <copy todir="${basedir}/target/junitreport/">
                  <fileset dir="${basedir}/target/artifacts/">
                    <include name="**/*.png"/>
                  </fileset>
                  <chainedmapper>
                    <filtermapper>
                      <replacestring from="." to="/"/>
                    </filtermapper>
                    <regexpmapper from="(.*)/(.*)" to="\1.\2" />
                  </chainedmapper>
                </copy>
                <junitreport todir = "${basedir}/target/junitreport">
                  <fileset dir = "${basedir}/target/surefire-reports">
                    <include name = "**/*.xml" />
                  </fileset>
                  <!--junit-frames.xsl in project folder extends target/junit-frames-base.xsl with links to screenshots-->
                  <!--expected screenshot location example: junitreport/org/groundwork/tests/ElementsStatsTest/testStats.png-->
                  <report styledir="${basedir}" format="frames" todir="${basedir}/target/junitreport"/>
                </junitreport>
              </target>
            </configuration>
          </execution>
          <execution>
            <!--in case screenshots generated by test runs need to have
                different locations and naming structures for further processing (i.e. in reports)-->
            <id>jenkins_junit_attachments_plugin</id>
            <phase>site</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <copy todir="${basedir}/target/surefire-reports/">
                  <fileset dir="${basedir}/target/artifacts/">
                    <include name="**/*.png"/>
                  </fileset>
                  <regexpmapper from="(.*)\.(.*.png)" to="\1/\2" />
                </copy>
              </target>
            </configuration>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>ant</groupId>
            <artifactId>ant-optional</artifactId>
            <version>1.5.3-1</version>
          </dependency>
          <dependency>
            <groupId>org.apache.ant</groupId>
            <artifactId>ant</artifactId>
            <version>1.10.12</version>
          </dependency>
          <dependency>
            <groupId>xalan</groupId>
            <artifactId>xalan</artifactId>
            <version>2.7.2</version>
          </dependency>
        </dependencies>
      </plugin>
      <plugin> <!--site phase-->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-site-plugin</artifactId>
        <version>3.10.0</version>
      </plugin>
      <plugin> <!--site phase-->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-project-info-reports-plugin</artifactId>
        <version>3.2.1</version>
      </plugin>
    </plugins>
  </build>
</project>
